{"version":3,"sources":["utils.js","components/SettingsGeneral.js","components/SettingsAppearance.js","components/SettingsSignout.js","images/icon_image.svg","components/ChatWindow.js","images/logotest.png","components/LoginPage.js","components/About.js","components/SignupPage.js","images/paul.jpg","components/SearchPage.js","components/FriendRequests.js","images/icon_settings.svg","images/icon_info.svg","images/icon_chat.svg","images/icon_search.svg","images/friend_requests.svg","components/Nav.js","components/Page404.js","App.js","reportWebVitals.js","index.js"],"names":["isLoggedIn","a","console","log","fetch","method","headers","mode","result","json","res","loggedIn","getUserInfo","username","userResult","userInfo","returnCode","info","Settings","props","getCurrentSettings","user","settings","name","password","handleChange","event","target","setState","value","handleNameSubmit","preventDefault","state","submittedName","document","getElementById","innerHTML","style","width","visibility","setTimeout","body","JSON","stringify","response","alertDiv","alertMessage","reset","handleCurrentPassword","submittedCurrentPassword","passwordVerified","handleNewPasswordSubmit","newPassword","newPasswordConfirm","undefined","bind","this","to","className","onSubmit","type","class","placeholder","onChange","id","form","disabled","Component","then","opacity","handleSubmit","action","MediaWidget","handleLatexSubmit","latex","replace","latexJSON","latexResult","latexReturn","filename","curChat","newMessage","chat_id","sender","curUser","message","time","getCurrentTime","handleImageSubmit","clientID","imgurID","IMGUR_ID","formData","FormData","fileInput","files","length","defImg","file","append","uploadResult","uploadReturn","success","data","link","img","display","generatePreview","backClick","URL","createObjectURL","i","status","onClick","hidden","for","src","React","ChatWindow","getChat","fetchurl","curMessage","curChatName","chatsList","messageList","intervalID","mediaState","handleMediaClick","curChatInfo","messages","chats","chatParticipants","participants","chatName","setInterval","getData","clearInterval","newChat","today","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","renderedContacts","map","chat","chat_name","changeChat","renderedMessages","href","slice","reverse","messageObj","formattedTime","match","formattedMinutes","msg_value","DisplayErrors","LoginPage","successCode","window","location","reload","logo","About","SignupPage","isSignedUp","password_confirm","SearchPage","searchWord","search","users","curUserList","hasSearched","handleClick","friendname","list","renderedcards","finalrender","contactList","index","splice","contactcard","button","search_value","FriendRequests","handleAccept","friendreq_id","curfriendreq","alert","updateandFetch","handleDelete","arraylength","friendrequestsList","array","j","Notifs","notifs","getUpdatedFriendrequestsList","renderedFriendRequests","Nav","curPage","page","IconInfo","Logo","IconChat","IconFriendReqs","IconSearch","IconSettings","Page404","egg","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1479ffd9.chunk.js","sourcesContent":["// Fetch to server side to check if the cookie stores the user name\n// can be imported and used wherever required\nconst isLoggedIn =  async () => {\n    console.log(\"inside isLoggedIn\")\n    const result = await fetch(\"/auth\", \n               {\n                method: 'GET',\n                headers: {'Content-Type': \"application/json; charset=utf-8\",},\n                mode:'cors',\n                })\n\n    const res = await result.json();\n    console.log(\"returning from IsLoggedIn \", res.loggedIn);\n    return res.loggedIn; // returns a boolean true/false\n  };\n\n\n// Function which returns info about the user specified, \n// otherwise about the user currently logged in\n// by first checking the cookie to retrieve the appropriate username \n// and then querying the database\nconst getUserInfo = async (username = null) => {\n  console.log(\"inside getUserInfo\");\n\n  // find which user is logged in\n  let userResult;\n  if (username == null)\n  {\n    const userResult = await fetch(\"/info\", \n              {\n                method: 'GET',\n                headers: {'Content-Type': \"application/json; charset=utf-8\",},\n            })\n    const res = await userResult.json();\n    username = res.username;\n  }\n\n  console.log(\"Username to lookup = \", username);\n\n  // get the info about that user\n  const result = await fetch(\"/info/\"+username, \n              {\n                method: 'GET',\n                headers: {'Content-Type': \"application/json; charset=utf-8\",},\n                mode:'cors',\n            })\n\n  const userInfo = await result.json();\n\n  if(userInfo.returnCode != 0)\n  {\n    return -1;\n  }\n\n  return userInfo.info;\n}\n\nexport { isLoggedIn, getUserInfo };\n","import React, { Component } from \"react\";\nimport { Link, Redirect } from 'react-router-dom';\nimport './style/Settings.css';\nimport {isLoggedIn, getUserInfo} from '../utils.js';\n\n\nexport default class Settings extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tloggedIn: true,\n\t\t\tusername: null,\n\t\t\tpassword: null,\n\t\t\tsubmittedName: null,\n\t\t\tname: null,\n\t\t\tpasswordVerified: false,\n\t\t}\n\t\tthis.handleNameSubmit = this.handleNameSubmit.bind(this);\n\n\t}\n\t//get current username and password\n\tgetCurrentSettings = async() =>\n\t{\n\t\tconst user = await getUserInfo();\n\t\tconst settings = {username: user.username, name: user.name, password: user.password};\n\t\treturn settings;\n\t}\n\tasync componentDidMount() \n    {                   \n\t\tconsole.log(\"Inside component did mount for settings page\");\n        const loggedIn = await isLoggedIn();\n        if (!loggedIn)\n        {\n            this.setState({loggedIn: false});\n        }\n\n\t\tconst settings = await this.getCurrentSettings();\n\t\tconsole.log(\"settings = \", settings);\n\n\t\tthis.setState({loggedIn: loggedIn, username: settings.username, name: settings.name, password: settings.password })\n\n    }\n\n\thandleChange = (event) => {\n\t\tconsole.log(\"inside handle change for\", event.target.name);\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n\thandleNameSubmit = async (event) =>\n\t{\n\t\t// handle username changes\n\t\tevent.preventDefault();\n\t\tconsole.log(\"Inside handle name submit\");\n\n\t\tif (this.state.submittedName== null)\n\t\t{\n\t\t\tconsole.log(\"Error: name field cannot be empty\");\n\t\t\tdocument.getElementById('alert-red').innerHTML='Name field cannot be empty'\n\t\t\tdocument.getElementById('alert-red').style.width='12vw';\n\t\t\tdocument.getElementById('alert-red').style.visibility='visible';\n    \n        \tsetTimeout(function() {\n            \tdocument.getElementById('alert-red').style.visibility='hidden';\n        \t}, 3000); // <-- time in milliseconds\n\t\t\treturn; \n\t\t}\n\n\t\tconst response = await fetch('/change/name/'+this.state.username, \n\t\t\t{\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t  'Content-Type': \"application/json; charset=utf-8\",\n\t\t\t  \t\t\t},\n\t\t\t  body: JSON.stringify({submittedName: this.state.submittedName})\n\t\t\t} \n\t\t)\n\n\t\tconst res = await response.json();\n\t\tconst returnCode = res.returnCode;\n\n\t\tvar alertDiv = (!res.returnCode) ? 'alert-green' : 'alert-red';\n\t\tvar alertMessage = (!res.returnCode) ? 'Name change successful!' : 'Database error :/';\n\n\t\t//create an alert based on if registartion is successful or not\n\t\tdocument.getElementById(alertDiv).innerHTML=alertMessage;\n\t\tdocument.getElementById(alertDiv).style.width=\"10vw\";\n\t\tdocument.getElementById(alertDiv).style.visibility='visible';\n\t\tsetTimeout(function() {\n\t\t\tdocument.getElementById(alertDiv).style.visibility='hidden';\n\t\t}, 3000); // <-- time in milliseconds\n\n\n\t\tif (returnCode != 0)\n\t\t{\n\t\t\t// database error\n\t\t\treturn;\n\t\t}\n\n\t\tevent.target.reset();\n\t\tthis.setState({name: this.state.submittedName})\n\n\t}\n\n\thandleCurrentPassword = async (event) =>\n\t{\n\t\t// check the user's current password\n\t\tevent.preventDefault();\n\t\tconsole.log(\"Inside handle password confirm \");\n\t\tif (this.state.password == this.state.submittedCurrentPassword)\n\t\t{\n\t\t\tevent.target.reset();\n\t\t\tthis.setState({passwordVerified: true});\n\t\t}\n\t\telse {\n\t\t\tdocument.getElementById('alert-red').innerHTML='Incorrect password'\n\t\t\tdocument.getElementById('alert-red').style.width='12vw';\n\t\t\tdocument.getElementById('alert-red').style.visibility='visible';\n    \n        \tsetTimeout(function() {\n            \tdocument.getElementById('alert-red').style.visibility='hidden';\n        \t}, 3000); // <-- time in milliseconds\n\t\t}\n\t}\n\n\thandleNewPasswordSubmit = async (event) =>\n\t{\n\t\t// handle password changes\n\n\t\tevent.preventDefault();\n\t\tconsole.log(\"Inside handle new password submit\");\n\n\t\tif (this.state.newPassword != this.state.newPasswordConfirm)\n\t\t{\n\t\t\tconsole.log(\"Passwords do not match\");\n\t\t\tdocument.getElementById('alert-red').innerHTML='Passwords do not match'\n\t\t\tdocument.getElementById('alert-red').style.width='12vw';\n\t\t\tdocument.getElementById('alert-red').style.visibility='visible';\n    \n        \tsetTimeout(function() {\n            \tdocument.getElementById('alert-red').style.visibility='hidden';\n        \t}, 3000); // <-- time in milliseconds\n\t\t\treturn;\n\t\t}\n\t\tif (this.state.newPassword == undefined)\n\t\t{\n\t\t\tconsole.log(\"Password cannot be null\");\n\t\t\tdocument.getElementById('alert-red').innerHTML='Password field cannot be empty'\n\t\t\tdocument.getElementById('alert-red').style.width='20vw';\n\t\t\tdocument.getElementById('alert-red').style.visibility='visible';\n    \n        \tsetTimeout(function() {\n            \tdocument.getElementById('alert-red').style.visibility='hidden';\n        \t}, 3000); // <-- time in milliseconds\n\t\t\treturn;\n\t\t}\n\t\tconsole.log(this.state.newPassword)\n\n\t\tconst response = await fetch('/change/password/'+this.state.username, \n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t'Content-Type': \"application/json; charset=utf-8\",\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbody: JSON.stringify({newPassword: this.state.newPassword})\n\t\t\t\t\t\t\t\t});\n\t\t\n\t\tconst res = await response.json();\n\t\t\n\t\tconst returnCode = res.returnCode;\n\n\t\tif (returnCode == 0)\n\t\t{\n\t\t\tconsole.log(\"Password updated\");\n\t\t\tdocument.getElementById('alert-green').innerHTML='Password updated'\n\t\t\tdocument.getElementById('alert-green').style.width='12vw';\n\t\t\tdocument.getElementById('alert-green').style.visibility='visible';\n    \n        \tsetTimeout(function() {\n            \tdocument.getElementById('alert-green').style.visibility='hidden';\n        \t}, 3000); // <-- time in milliseconds\n\t\t}\n\t\telse \n\t\t{\n\t\t\tconsole.log(\"Error updating password\");\n\t\t\tdocument.getElementById('alert-red').innerHTML='Error updating password'\n\t\t\tdocument.getElementById('alert-red').style.width='12vw';\n\t\t\tdocument.getElementById('alert-red').style.visibility='visible';\n    \n        \tsetTimeout(function() {\n            \tdocument.getElementById('alert-red').style.visibility='hidden';\n        \t}, 3000); // <-- time in milliseconds\n\t\t}\n\n\t\tevent.target.reset();\n\n\n\t}\n\n\trender() {\n\t\tconsole.log(\"this.state = \", this.state);\n\t\tif(this.state.loggedIn == false)\n        {\n            return <Redirect to='/login' />;\n        }\n\t\treturn (\n\t\t\t\n\t\t\t<div className = \"main\">\n\t\t\t\t<div className = \"container\">\n\t\t\t\t\t<div className = \"menu\">\n\t\t\t\t\t\t<Link to=\"/settings/general\" className = \"menu-button-active\">\n\t\t\t\t\t\t\tGeneral\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link to=\"/settings/appearance\" className = \"menu-button\">\n\t\t\t\t\t\t\tAppearance\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link to=\"/settings/signout\" className = \"menu-button\">\n\t\t\t\t\t\t\tSignout\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className = \"main\">\n\t\t\t\t\t\t<div className = \"content\">\n\t\t\t\t\t\t\t<div className = \"category-header\">\n\t\t\t\t\t\t\t\tGeneral Settings\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className = \"field-text\">\n\t\t\t\t\t\t\t\t<div className = \"setting-name\">\n\t\t\t\t\t\t\t\t\tName\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<form onSubmit = {this.handleNameSubmit}>\n                       \t\t\t\t<input\n                        \t\t\t\ttype=\"text\" \n                \t       \t\t\t\tclass=\"settings-input\"\n\t\t\t\t\t\t\t\t\t\tname=\"submittedName\"\n            \t           \t\t\t\tplaceholder={this.state.name}\n\t\t\t\t\t\t\t\t\t\tonChange = {this.handleChange}\n                       \t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<input className=\"settings-submit\" type=\"submit\" value=\" \" />\n                    \t\t\t</form>\n\t\t\t\t\t\t\t\t<div className = \"setting-padding\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"category-header\">Change Password</div>\n\t\t\t\t\t\t\t<div className = \"field-text\">\n\t\t\t\t\t\t\t\t<div className = \"setting-name\">\n\t\t\t\t\t\t\t\t\tCurrent Password\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<form onSubmit = {this.handleCurrentPassword} >\n                       \t\t\t\t<input\n                 \t       \t\t\t\ttype=\"password\" \n                           \t\t\t\tclass=\"settings-input\"\n\t\t\t\t\t\t\t\t\t\tname = \"submittedCurrentPassword\"\n\t\t\t\t\t\t\t\t\t\tonChange = {this.handleChange}\n                       \t\t\t\t/>\n\t\t\t\t\t\t\t\t<input type=\"submit\" value=\" \" className=\"settings-submit\"/>\n                    \t\t\t</form>\n                \t\t\t\t<div className = \"setting-padding\" />\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* conditionally render password change fields*/}\n\t\t\t\t\t\t\t{this.state.passwordVerified ? \n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<form id=\"changePW\" onSubmit = {this.handleNewPasswordSubmit}/>\n\t\t\t\t\t\t\t\t\t<div className = \"field-text\"> \n\t\t\t\t\t\t\t\t\t\t<div className = \"setting-name\">\n\t\t\t\t\t\t\t\t\t\t\tNew Password\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div>\n                       \t\t\t\t\t\t<input\n                       \t\t\t\t\t\t\tform=\"changePW\"\n                        \t\t\t\t\t\ttype=\"password\" \n                \t       \t\t\t\t\t\tclassName=\"settings-input\"\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"newPassword\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange = {this.handleChange}\n                       \t\t\t\t\t\t/>\n                       \t\t\t\t\t\t<input className=\"settings-submit-placeholder\" type=\"submit\" value=\" \" disabled/>\n                       \t\t\t\t\t</div>\n                       \t\t\t\t\t<div className =\"setting-padding\"/>\n                       \t\t\t\t</div>\n                       \t\t\t\t<div className=\"field-text\">\n\t\t\t\t\t\t\t\t\t\t<div className = \"setting-name\">\n\t\t\t\t\t\t\t\t\t\t\tConfirm Password\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\tform=\"changePW\"\n\t\t\t\t\t\t\t\t\t\t\t\ttype = \"password\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName =\"settings-input\"\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"newPasswordConfirm\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange = {this.handleChange}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<input form=\"changePW\" className=\"settings-submit\" type=\"submit\" value=\" \" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className = \"setting-padding\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t: \n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<div className = \"field-text-disabled\">  \n\t\t\t\t\t\t\t\t\t<div className = \"setting-name\">\n\t\t\t\t\t\t\t\t\t\tNew Password\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<form>\n                       \t\t\t\t\t<input\n                       \t\t\t\t\t\tform=\"changePW\"\n                        \t\t\t\t\ttype=\"password\" \n                \t       \t\t\t\t\tclassName=\"settings-input\"\n\t\t\t\t\t\t\t\t\t\t\tname=\"newPassword\"\n\t\t\t\t\t\t\t\t\t\t\tonChange = {this.handleChange}\n\t\t\t\t\t\t\t\t\t\t\tdisabled\n                       \t\t\t\t\t/>\n                       \t\t\t\t\t<input className=\"settings-submit-placeholder\" type=\"submit\" value=\" \" disabled/> \n                       \t\t\t\t</form>\n                       \t\t\t\t<div className =\"setting-padding\"/>\n                       \t\t\t</div>\n                       \t\t\t<div className=\"field-text-disabled\">\n\t\t\t\t\t\t\t\t\t<div className = \"setting-name\">\n\t\t\t\t\t\t\t\t\t\tConfirm Password\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\tform=\"changePW\"\n\t\t\t\t\t\t\t\t\t\t\ttype = \"password\"\n\t\t\t\t\t\t\t\t\t\t\tclassName =\"settings-input\"\n\t\t\t\t\t\t\t\t\t\t\tname=\"newPasswordConfirm\"\n\t\t\t\t\t\t\t\t\t\t\tonChange = {this.handleChange}\n\t\t\t\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<input className=\"settings-submit\" type=\"submit\" value=\" \" disabled/>\n\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t<div className = \"setting-padding\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>} {/* end of conditional rendering  */}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t\t\n\t}\n}","import React, { Component } from \"react\";\nimport { Link, Redirect } from 'react-router-dom';\nimport './style/Settings.css';\nimport {isLoggedIn} from '../utils.js';\n\n\n//This page isnt read to be deployed - it should enable users in the future to customize the colors of their app\nexport default class Settings extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tloggedIn: true,\n\t\t}\n\t}\n\n\tcomponentDidMount() //we need to make sure we are actually logged in\n    {                   \n        console.log(\"Inside component did mount for settings page\");\n        isLoggedIn().then(loggedIn => this.setState({loggedIn: loggedIn}));\n    }\n\n\trender() {\n\t\tif(this.state.loggedIn == false)\n        {\n            return <Redirect to='/login' />;\n        }\n\t\treturn (\n\t\t\t<div className = \"main\">\n\t\t\t\t<div className = \"container\">\n\t\t\t\t\t<div className = \"menu\">\n\t\t\t\t\t\t<Link to=\"/settings/general\" className = \"menu-button\">\n\t\t\t\t\t\t\tGeneral\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link to=\"/settings/appearance\" className = \"menu-button-active\">\n\t\t\t\t\t\t\tAppearance\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link to=\"/settings/signout\" className = \"menu-button\">\n\t\t\t\t\t\t\tSignout\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className = \"main\">\n\t\t\t\t\t\t<div className = \"content\">\n\t\t\t\t\t\t\t<div className = \"category-header\" style={{opacity: 0.5}}>\n\t\t\t\t\t\t\t\tUnder Construction\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t\t\n\t}\n}","import React, { Component } from \"react\";\nimport { Link, Redirect } from 'react-router-dom';\nimport './style/Settings.css';\nimport {isLoggedIn} from '../utils.js';\n\nexport default class Settings extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tloggedIn: true,\n\t\t}\n\t}\n\n\tcomponentDidMount() //we need to make sure we are actually logged in\n    {                   \n        console.log(\"Inside component did mount for settings page\");\n        isLoggedIn().then(loggedIn => this.setState({loggedIn: loggedIn}));\n    }\n\n\thandleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n\thandleSubmit = () => {\n\t\t//generate a green div alert that gives a signed out message\n\t\tdocument.getElementById('alert-green').innerHTML='Signed out!';\n\t\tdocument.getElementById('alert-green').style.width=\"10vw\";\n\t\tdocument.getElementById('alert-green').style.visibility='visible';\n\t\tsetTimeout(function() {\n\t\t\tdocument.getElementById('alert-green').style.visibility='hidden';\n\t\t}, 5000); // <-- time in milliseconds\n\t}\n\n\n\trender() {\n\t\tif(this.state.loggedIn == false)\n        {\n            return <Redirect to='/login' />;\n        }\n\t\treturn (\n\t\t\t<div className = \"main\">\n\t\t\t\t<div className = \"container\">\n\t\t\t\t\t<div className = \"menu\">\n\t\t\t\t\t\t<Link to=\"/settings/general\" className = \"menu-button\">\n\t\t\t\t\t\t\tGeneral\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link to=\"/settings/appearance\" className = \"menu-button\">\n\t\t\t\t\t\t\tAppearance\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link to=\"/settings/signout\" className = \"menu-button-active\">\n\t\t\t\t\t\t\tSignout\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className = \"main\">\n\t\t\t\t\t\t<div className = \"content\">\n\t\t\t\t\t\t\t<div className = \"category-header\">\n\t\t\t\t\t\t\t\tSignout\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className = \"field-text\">\n\t\t\t\t\t\t\t\t<form method=\"post\" action=\"/settings/signout\" onSubmit={this.handleSubmit}>\n                       \t\t\t\t<input\n                        \t\t\t\ttype=\"submit\" \n                        \t\t\t\tclassName=\"logout-button\"\n                        \t\t\t\tvalue=\"Click Here to Sign Out\"\n                       \t\t\t\t/>\n                    \t\t\t</form>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t\t\n\t}\n}","export default __webpack_public_path__ + \"static/media/icon_image.38ab5ecc.svg\";","import React, { Component } from \"react\";\nimport './style/ChatWindow.css';\nimport { Redirect } from \"react-router-dom\";\nimport { isLoggedIn, getUserInfo } from '../utils.js';\nimport defImg from '../images/icon_image.svg';\nimport imgurID from '../imgurID.json';\n\n\n// display media widget if the media button is clicked, handle clicks within the widget\n\nclass MediaWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            img: defImg,\n            display: 1,\n        }\n        this.generatePreview = this.generatePreview.bind(this);\n        this.backClick = this.backClick.bind(this);\n    }\n\n\n\n    handleLatexSubmit = async (event) => { //sends LaTeX input to renderer, posts returned URL to chat\n        event.preventDefault();\n        var latex = document.getElementById(\"latexEditor\").value\n\n        latex = latex.replace(/\\n/g, '');\n        latex = \"\\\\documentclass{article}\\\\begin{document}\" + latex + \"\\\\pagenumbering{gobble}\\\\end{document}\"\n        // append document and page number tags\n        const latexJSON = JSON.stringify({ latex: latex })\n\n        // perform POST to backend to receive rendered LaTeX URL\n        const latexResult = await fetch(\"/latexRequest\",\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': \"application/json\",\n                },\n                body: latexJSON\n            })\n        const latexReturn = await latexResult.json()\n        const filename = await latexReturn.filename;\n\n        // perform POST to backend to send message payload\n\n        const fetchurl = \"/sendchat/\" + this.props.curChat;\n        const newMessage = { chat_id: this.props.curChat, sender: this.props.curUser, message: filename, time: this.props.getCurrentTime(), type: \"latex\" };\n        const result = await fetch(\"/sendchat/\" + this.props.curChat,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': \"application/json; charset=utf-8\",\n                },\n                body: JSON.stringify(newMessage)\n            })\n\n        const res = await result.json();  /* {returnCode} */\n\n        const returnCode = await res.returnCode;\n\n        if (returnCode != 0) {\n            console.log(\"error sending chat\");\n            return null;\n        }\n\n        event.target.reset();\n\n    }\n\n    handleImageSubmit = async (event) => { // sends uploaded image to imgur, posts returned URL to chat\n        const clientID = 'Client-ID ' + imgurID.IMGUR_ID\n        event.preventDefault();\n        var formData = new FormData();\n        const fileInput = document.getElementById('imageUpload');\n        if (fileInput.files.length == 0 || fileInput.files[0] == defImg) {\n            console.log(\"no files selected\");\n            //create an alert based on if registration is successful or not\n            document.getElementById('alert-red').innerHTML = 'No image attached!';\n            document.getElementById('alert-red').style.width = \"10vw\";\n            document.getElementById('alert-red').style.visibility = 'visible';\n            setTimeout(function () {\n                document.getElementById('alert-red').style.visibility = 'hidden';\n            }, 3000); // <-- time in milliseconds\n            return;\n        }\n        const file = fileInput.files[0];\n        formData.append('image', file);\n        \n        const uploadResult = await fetch('https://api.imgur.com/3/image', { //perform post to imgur API\n            method: 'POST',\n            headers: {\n                'Authorization': clientID,\n            },\n            body: formData\n        })\n\n        const uploadReturn = await uploadResult.json();\n        if (!(uploadReturn.success))\n        {\n            console.log(\"Failed to Upload\");\n            document.getElementById('alert-red').innerHTML='Failed to Upload'\n            document.getElementById('alert-red').style.width='12vw';\n            document.getElementById('alert-red').style.visibility='visible';\n            setTimeout(function() {\n                document.getElementById('alert-red').style.visibility='hidden';\n            }, 3000); // <-- time in milliseconds\n            return; \n        }\n        // perform POST to backend to send message payload\n\n        const fetchurl = \"/sendchat/\" + this.props.curChat;\n        const newMessage = { chat_id: this.props.curChat, sender: this.props.curUser, message: uploadReturn.data.link, time: this.props.getCurrentTime(), type: \"image\" };\n        const result = await fetch(\"/sendchat/\" + this.props.curChat,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': \"application/json; charset=utf-8\",\n                },\n                body: JSON.stringify(newMessage)\n            })\n\n        const res = await result.json();  /* {returnCode} */\n\n        const returnCode = await res.returnCode;\n\n        if (returnCode != 0) {\n            console.log(\"error sending chat\");\n            return null;\n        }\n        this.setState({ img: defImg });\n        event.target.reset();\n    }\n\n    generatePreview(event) {\n        this.setState({ img: URL.createObjectURL(event.target.files[0]) });\n    }\n\n    backClick(i) {\n        if (i == 3) {\n            this.setState({ img: defImg })\n        }\n        this.setState({ display: i })\n    }\n\n    render() { //render the media widget \n        const status = this.props.status; //used to determine whether to display the media widget at all\n        if(status) {\n            if (this.state.display === 1) { //render the default view on media button click or back click\n                return (\n                    <div className=\"mediaWidget\">\n                        <div className=\"mediaLatex\" onClick={() => this.backClick(2)} />\n                        <div className=\"mediaUploadImage\" onClick={() => this.backClick(3)} />\n                    </div>\n                )\n            }\n            else if (this.state.display === 2) {  //render the latex widget on latex button click\n                return (\n                    <div className=\"latexWidget\">\n                        <div className=\"widgetHeader\">\n                            <div className=\"button-back\" onClick={() => this.backClick(1)} />\n                        </div>\n                        <form onSubmit={this.handleLatexSubmit}>\n                            <textarea className=\"latexInput\" id=\"latexEditor\" placeholder=\"Enter LaTeX code...\" />\n                            <input className=\"widgetSend\" type=\"submit\" value=\"Send\" />\n                        </form>\n                    </div>\n                )\n            }\n            else if (this.state.display === 3) { //render the image input widget\n                return (\n                    <div className=\"imageWidget\">\n                        <div className=\"widgetHeader\">\n                            <div className=\"button-back\" onClick={() => this.backClick(1)} />\n                        </div>\n                        <form id='imgform' onSubmit={this.handleImageSubmit}>\n                            <input type=\"file\" id=\"imageUpload\" name=\"imagename\" onChange={this.generatePreview} hidden />\n                            <label for=\"imageUpload\">\n                                <div><img src={this.state.img} id=\"preview\" /></div>\n                                <input className=\"widgetSend\" type=\"submit\" value=\"Send\" />\n                            </label>\n                        </form>\n                    </div>\n                )\n            }\n        }\n        return (null);\n    }\n}\n\n\n\n// main page class\n\nexport default class ChatWindow extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loggedIn: true,\n            curUser: null, // stores the username of the person logged in\n            curChat: null, //stores the chatId of current chat\n            curChatName: null,  // person(s) usr is chatting w/\n            chatsList: null, // list of chats the user has \n            messageList: null, // list of messages in the current chat\n            curMessage: null, // current message to be sent\n            intervalID: null, // interval for message refresh\n            mediaState: 0,  // 0 for not showing, 1 for showing\n\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleMediaClick = this.handleMediaClick.bind(this);\n    }\n\n    getChat = async (chat_id) => {\n\n        const fetchurl = \"/chat/\" + chat_id;\n        const result = await fetch(fetchurl,\n            {\n                method: 'GET',\n                headers: {\n                    'Content-Type': \"application/json; charset=utf-8\",\n                },\n            })\n\n        const res = await result.json();  /* {returnCode, messages, participants} */\n\n        const returnCode = await res.returnCode;\n\n        if (returnCode != 0) {\n            console.log(\"error accessing messages\");\n            return null;\n        }\n\n        return res;\n\n    }\n\n    // gets the updated list of messages and sets state.\n    // called every 3 seconds\n    async getData() {\n        try {\n            const curChatInfo = await this.getChat(this.state.curChat);\n            const messageList = curChatInfo.messages;\n            this.setState({ messageList: messageList });\n        }\n        catch {\n            console.log(\"user has no chat data\");\n        }\n    }\n\n    async componentDidMount() //action to take as soon as enter the page\n    {\n        const loggedIn = await isLoggedIn();\n        if (!loggedIn) {\n            this.setState({ loggedIn: false });\n        }\n\n        const userInfo = await getUserInfo(); // about current user\n        const curUser = userInfo.username;\n\n        const chatsList = userInfo.chats;\n        if (chatsList.length > 0) {\n            const curChat = userInfo.chats[0].chat_id;  // most recent chat is displayed by default\n            const curChatInfo = await this.getChat(curChat);\n\n            var chatParticipants = [];\n            try {\n                chatParticipants = curChatInfo.participants;\n            }\n            catch {\n                chatParticipants = [];\n            }\n\n            const chatName = (chatParticipants[0] == curUser) ? chatParticipants[1] : chatParticipants[0];\n\n            var messageList = []\n            try {\n                messageList = curChatInfo.messages;\n            }\n            catch {\n                messageList = []\n            }\n\n            // get updated list of messages every 3 seconds\n            this.intervalID = setInterval(this.getData.bind(this), 3000)\n\n            this.setState({\n                loggedIn: loggedIn, curUser: curUser, curChat: curChat,\n                curChatName: chatName, messageList: messageList,\n                chatsList: chatsList,\n            });\n        }\n        else {\n            // get updated list of messages every 3 seconds\n            this.intervalID = setInterval(this.getData.bind(this), 3000)\n            this.setState({ loggedIn: loggedIn, curUser: curUser, });\n        }\n\n    }\n\n    componentWillUnmount() {\n        // stop interval once we exit this page\n        clearInterval(this.intervalID);\n    }\n\n    async changeChat(newChat) {\n        const curChatInfo = await this.getChat(newChat);\n\n        const chatParticipants = curChatInfo.participants;\n\n        const chatName = (chatParticipants[0] == this.state.curUser) ? chatParticipants[1] : chatParticipants[0];\n\n        const messageList = curChatInfo.messages;\n\n        this.setState({\n            curChat: newChat,\n            curChatName: chatName, messageList: messageList,\n        });\n\n    }\n\n    getCurrentTime() {\n        var today = new Date();\n        var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n        var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n        var dateTime = date + ' ' + time;\n\n        return dateTime\n    }\n\n    handleChange = (event) => {\n        const newMessage = { chat_id: this.state.curChat, sender: this.state.curUser, message: event.target.value, time: this.getCurrentTime(), type: \"text\" };\n        this.setState({ curMessage: newMessage });\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const fetchurl = \"/sendchat/\" + this.state.curChat;\n        const result = await fetch(\"/sendchat/\" + this.state.curChat,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': \"application/json; charset=utf-8\",\n                },\n                body: JSON.stringify(this.state.curMessage)\n            })\n\n        const res = await result.json();  /* {returnCode} */\n\n        const returnCode = await res.returnCode;\n\n        if (returnCode != 0) {\n            console.log(\"error sending chat\");\n            return null;\n        }\n\n        event.target.reset();\n\n    }\n    //handle clicks on the media button\n    handleMediaClick() {\n        this.setState({mediaState: !(this.state.mediaState)})\n\n    }\n\n\n\n    render() {\n        if (this.state.loggedIn == false) {\n            return <Redirect to='/login' />;\n        }\n        if (this.state.curUser == null) {\n            return (<div> Loading </div>);\n        }\n\n        //chatsList (which is the list of contacts) is received from the server\n\n        const chatsList = this.state.chatsList;\n        console.log(\"chatsList = \", chatsList)\n        try {\n            var renderedContacts = chatsList.map(chat =>\n                (chat.chat_name === this.state.curChatName) ?\n                    <div className=\"contact-active\" onClick={() => this.changeChat(chat.chat_id)}>{chat.chat_name}</div> :\n                    <div className=\"contact\" onClick={() => this.changeChat(chat.chat_id)}>{chat.chat_name}</div>\n            );\n        }\n        catch {\n            var renderedContacts = null;\n        }\n\n        const messages = this.state.messageList;\n        var renderedMessages;\n        if (renderedContacts === null) {\n            renderedMessages = <div className=\"no-chats\">Looks like you have no chats. <a href=\"/search\" class=\"link\">Add a user</a> to get started.</div>\n        }\n        else if (messages === null || messages.length == 0) //if a chat with curChat id has no messages, display a no messages div\n        {\n            renderedMessages = <div className=\"no-messages\">Looks like this chat has no messages!</div>\n        }\n        else // otherwise render the messages\n        {\n            renderedMessages = messages.slice(0).reverse().map((messageObj) => {\n                let sender = messageObj['sender'];\n                let message = messageObj['message'];\n                let time = messageObj['time'];\n                let type = messageObj['type'];    \n\n                // extract the timestamp from the message data\n                var timePatternHours = /([0-9]|[0-9][0-9]):(?=(([0-9]|[0-9][0-9]):))/g\n                var timePatternMinutes = /(?<=([0-9]|[0-9][0-9]):)([0-9]|[0-9][0-9])(?=:)/g\n                let formattedTime = time.match(timePatternHours)\n                let formattedMinutes = time.match(timePatternMinutes)\n                if (formattedMinutes[0].length === 2) {\n                    formattedTime += formattedMinutes\n                } else {\n                    formattedTime += '0' + formattedMinutes\n                }\n\n\n                if (sender === this.state.curUser) {\n                    if (type === \"latex\") {\n                        return (\n                            <div className=\"sent\">\n                                <div className=\"messageText\">\n                                    <img className=\"messageLatexSent\" src={message} />\n                                </div>\n                                <div className=\"messageTimeSent\">\n                                    {formattedTime}\n                                </div>\n                            </div>\n                        )\n                    } else if (type === \"image\") {\n                        return (\n                            <div className=\"sent\">\n                                <div className=\"messageText\">\n                                    <img className=\"messageImage\" src={message} />\n                                </div>\n                                <div className=\"messageTimeSent\">\n                                    {formattedTime}\n                                </div>\n                            </div>\n                        )\n                    }\n\n                    return (\n                        <div className=\"sent\">\n                            <div className=\"messageText\">\n                                {message}\n                            </div>\n                            <div className=\"messageTimeSent\">\n                                {formattedTime}\n                            </div>\n                        </div>\n                    );\n                }\n                else {\n                    if (type === \"latex\") {\n                        return (\n                            <div className=\"received\">\n                                <div className=\"messageText\">\n                                    <img className=\"messageLatexReceived\" src={message} />\n                                </div>\n                                <div className=\"messageTimeSent\">\n                                    {formattedTime}\n                                </div>\n                            </div>\n                        )\n                    } else if (type === \"image\") {\n                        return (\n                            <div className=\"received\">\n                                <div className=\"messageText\">\n                                    <img className=\"messageImage\" src={message} />\n                                </div>\n                                <div className=\"messageTimeSent\">\n                                    {formattedTime}\n                                </div>\n                            </div>\n                        )\n                    }\n                    return (\n                        <div className=\"received\">\n                            <div className=\"messageText\">\n                                {message}\n                            </div>\n                            <div className=\"messageTimeReceived\">\n                                {formattedTime}\n                            </div>\n                        </div>\n                    );\n                }\n            })\n        }\n\n        return (\n            <div className=\"chatWindow\">\n                <div className=\"sidebar\">\n                    <div className=\"contactsList\">\n                        {renderedContacts}\n                    </div>\n                </div>\n                <div className=\"curChat\">\n                    <div className=\"inputField\">\n                        <div className=\"button-media\" onClick={() => this.handleMediaClick()} />\n                        <form onSubmit={this.handleSubmit}>\n                            <input\n                                type=\"text\"\n                                className=\"message-input\"\n                                placeholder=\"Type a message...\"\n                                onChange={this.handleChange}\n                                value={this.state.msg_value}\n                            />\n                            <input className=\"message-send\" type=\"submit\" value=\"\" />\n\n                        </form>\n                    </div>\n                    <div className=\"messages\">\n                        <MediaWidget\n                            status={this.state.mediaState}\n                            onClick={(i) => this.handleMediaClick(i)}\n                            getCurrentTime={this.getCurrentTime}\n                            {...this.state} />\n                        {renderedMessages}\n                    </div>\n                    <div className=\"currentChatTo\">\n                        {this.state.curChatName}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","export default __webpack_public_path__ + \"static/media/logotest.fe4b12c5.png\";","import React, { Component } from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport './style/LoginPage.css';\nimport logo from '../images/logotest.png';\nimport { isLoggedIn } from '../utils.js';\n\nfunction DisplayErrors(props) {\n    const success = props.success;\n    switch (success) {\n        case 1: //wrong password\n            return (<div className=\"loginError\">Incorrect password</div>)\n        case 2: //invalid username\n            return (<div className=\"loginError\">Invalid username</div>)\n        default: \n            return (null);\n    }\n}\n\nexport default class LoginPage extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            username: \"\", \n            password: \"\", \n            loggedIn: false, \n            successCode: 0,\n        };\n    }\n    async componentDidMount() \n    {                   \n        const loggedIn = await isLoggedIn();\n        if (loggedIn)\n        {\n            this.setState({loggedIn: true});\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    handleSubmit =  async (event) => {\n        event.preventDefault();\n        console.log(\"login state = \", this.state)\n        const result = await fetch(\"/login\", \n                  {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': \"application/json; charset=utf-8\",\n                  },\n                  body: JSON.stringify(this.state) /* this is the data being posted */\n        })\n        const res = await result.json();  /* this is the res sent by the backend */\n\n        const loggedIn = res.successCode == 0; \n\n        if(loggedIn)\n        {\n            event.target.reset(); // clear out form entries\n            this.setState({loggedIn: true, username: \"\", password: \"\",});\n            window.location.reload();  // necessary for nav bar to reload\n        }\n        else \n        {\n            event.target.reset(); // clear out form entries\n            this.setState({loggedIn: false, successCode: res.successCode, username: \"\", password: \"\",});  \n        }\n\n\n        };\n\n    render()\n    {\n        if(this.state.loggedIn)\n        {\n            return <Redirect to='/chats' />;\n        }\n\n        return (\n            <div className=\"login\">\n            <img src={logo} id=\"login-logo\"/>\n            <form action=\"/login\" className=\"loginform\" onSubmit={this.handleSubmit}>\n                <input type=\"text\" className=\"loginField\" placeholder=\"Username\" name=\"username\" value = {this.state.username} onChange = {this.handleChange} />\n                <input type=\"password\" className=\"loginField\" placeholder=\"Password\" name=\"password\" value = {this.state.password} onChange = {this.handleChange}/>\n                <DisplayErrors success={this.state.successCode} />\n                <input type=\"submit\" className=\"loginButton\" value=\"Log In\"/>\n                <a href=\"/signup\" id=\"loginlink\">Don't have an account? Click here to sign up.</a>\n            </form>\n            <div id=\"contact\" className=\"contactlink\">Need help with your account or have feedback? <a href =\"/about\">Contact us</a></div>\n            </div> \n          );\n        \n    }\n}\n","import React, { Component } from \"react\";\nimport './style/About.css'; \t\nimport logo from '../images/logotest.png';\n\n\n//just an about page describing our app\nexport default function About(props) {\n        return (\n            <div className=\"about\">\n                <img src={logo} id=\"about-logo\"/>\n                <div className=\"info-content\">\n                    Welcome to UChat created by the Bash Brothers! UChat is an application where users can share and send messages like any other app along with LaTeX equations and images!\n                    <p>Aman Oberoi</p>\n                    <p>Kevin Huang</p>\n                    <p>Milo Kearney</p>\n                    <p>Sudhanshu Agrawal</p>\n                    <p>Yan Hauw &lt;ya2n@protonmail.com&gt;</p>\n                </div>\n\n             </div> \n        )\n}\n","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport './style/SignupPage.css';\nimport logo from '../images/logotest.png';\nimport { isLoggedIn } from '../utils.js';\n\nfunction DisplayErrors(props) {\n    const success = props.success;\n    switch (success) {\n        case 1: //username already taken\n            return (<div className=\"signupError\">Username is already taken</div>)\n        case 2: //empty password/username\n            return (<div className=\"signupError\">Username and password must be non-empty</div>)\n        case 3: //passwords do not match\n            return (<div className=\"signupError\">Passwords do not match</div>)\n        default: \n            return (null);\n    }\n}\n\nexport default class SignupPage extends React.Component\n{      \n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            name: \"\", \n            username: \"\", \n            password: \"\", \n            password_confirm: \"\", \n            isSignedUp: false,\n            loggedIn: false,\n            successCode: 0, \n        };\n    }\n\n    async componentDidMount() \n    {                   \n        const loggedIn = await isLoggedIn();\n        if (loggedIn)\n        {\n            this.setState({loggedIn: true});\n            window.location.reload();\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n\n    handleSubmit =  async (event) => {\n        event.preventDefault();\n        const result = await fetch(\"/signup\", \n                  {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': \"application/json; charset=utf-8\",\n                  },\n                  body: JSON.stringify(this.state) /* this is the data being posted */\n        })\n\n        const res = await result.json();  /* this is the res sent by the backend */\n\n        var alertDiv = (!res.successCode) ? 'alert-green' : 'alert-red';\n        var alertMessage = (!res.successCode) ? 'Registration successful!' : 'Registration unsuccessful!';\n\n        //create an alert based on if registartion is successful or not\n        document.getElementById(alertDiv).innerHTML=alertMessage;\n        document.getElementById(alertDiv).style.width=\"10vw\";\n        document.getElementById(alertDiv).style.visibility='visible';\n        setTimeout(function() {\n            document.getElementById(alertDiv).style.visibility='hidden';\n        }, 3000); // <-- time in milliseconds\n\n        event.target.reset(); // clear out form entries\n        this.setState({isSignedUp: !res.successCode, successCode: res.successCode, name: \"\", \n            username: \"\", \n            password: \"\", \n            password_confirm: \"\", });\n        };\n\n    render()\n    {\n        if (this.state.isSignedUp) //once signup is complete\n        {\n            return <Redirect to=\"/login\" />;\n        }\n        if (this.state.loggedIn) //if you're already logged in\n        {\n            return <Redirect to=\"/chats\" />\n        }\n        return (\n            <div className=\"signup\">\n                <img src={logo} id=\"signup-logo\"/>\n                <form action=\"/signup\" className=\"signupform\" onSubmit={this.handleSubmit}>\n                    <input type=\"text\" className=\"signupField\" placeholder=\"Name\" name=\"name\" value = {this.state.value} onChange = {this.handleChange}/>\n                    <input type=\"text\" className=\"signupField\" placeholder=\"Username\" name=\"username\" value = {this.state.value} onChange = {this.handleChange} />\n                    <input type=\"password\" className=\"signupField\" placeholder=\"Password\" name=\"password\" value = {this.state.value} onChange = {this.handleChange}/>\n                    <input type=\"password\" className=\"signupField\" placeholder=\"Re-enter password\" name=\"password_confirm\" value = {this.state.value} onChange = {this.handleChange}/>\n                    <DisplayErrors success={this.state.successCode} />\n                    <input type=\"submit\" className=\"signupButton\" value=\"Sign Up\" />\n                    <a href=\"/login\" id=\"loginlink\">Already have an account? Click here to sign in.</a>\n                </form>\n                <div id=\"contact\" className=\"contactlink\">Need help with your account or have feedback? <a href =\"/about\">Contact us</a></div>\n             </div> \n        );\n    }\n}\n\n\n\n\n","export default __webpack_public_path__ + \"static/media/paul.74c423f7.jpg\";","import React, { Component } from \"react\";\nimport './style/SearchPage.css';\nimport egg from '../images/paul.jpg';\nimport {Redirect} from \"react-router-dom\";\nimport {isLoggedIn, getUserInfo} from '../utils.js';\n\nexport default class SearchPage extends Component {\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            loggedIn: true, \n            search: \"\", \n            curUser: \"default\",\n            successCode: 1, // successCode = 0 means search was successful, 1 means no search yet, -1 means search unsuccesful\n            curUserList: [],\n            hasSearched: false, //has the user searched yet\n        };\n    }\n    async componentDidMount() //we need to make sure we are actually logged in\n    {                   \n        console.log(\"Inside component did mount for chat window\");\n        const userInfo = await getUserInfo(); // about current user\n        const curUser = userInfo.username;  \n        isLoggedIn().then(loggedIn => this.setState({loggedIn: loggedIn}));\n        this.setState({curUser:curUser});\n    }\n\n    handleChange = (event) => {\n        console.log(\"Inside handleChange\")\n        const searchWord = event.target.value\n        console.log(\"Inside handleChange of search page, searched keyword is: \", searchWord)\n        this.setState({search: searchWord})\n    }\n\n    handleSubmit =  async (event) => {\n        event.preventDefault();\n        const result = await fetch(\"/findusers/\" + this.state.search, \n                  {\n                    method: 'GET',\n                    headers: {\n                      'Content-Type': \"application/json; charset=utf-8\",\n                  },\n                  /* this is the data being posted */\n        });\n\n        const res = await result.json();  /* this is the res sent by the backend of find users etc */\n\n        const successCode = await res.successCode;\n        const users = await res.users;\n\n        event.target.reset(); // clear out form entries\n        this.setState({successCode: successCode, curUserList: users, hasSearched: true})\n        // make the contactList object \n    };\n\n    // for add friend button\n    handleClick = async (user) => {\n        const result = await fetch(\"/sendfriendrequest\", \n                  {\n                    method: 'POST',\n                    headers: {\n                      'Content-Type': \"application/json; charset=utf-8\",\n                  },\n                  body: JSON.stringify({username: this.state.curUser, friendname: user})\n                  /* this is the data being posted */\n        });\n\n        const res = await result.json();  /* this is the res sent by the backend of find users etc */\n        document.getElementById('alert-green').innerHTML='Friend Request Sent!'\n        document.getElementById('alert-green').style.width=\"10vw\"\n        document.getElementById('alert-green').style.visibility='visible';\n        setTimeout(function() {\n            document.getElementById('alert-green').style.visibility='hidden';\n        }, 3000); // <-- time in milliseconds\n        \n        var list = this.state.curUserList;\n        for(var i in list){\n            if((list[i])['user'] == user)\n            {\n                (list[i])['addstatus'] = 1;\n                break;\n            }\n        }\n        this.setState({curUserList: list});\n\n    }\n\n    button(status, user) { \n        // render the button depending on the user's status\n        switch (status) {\n            case 0:\n                return(<div className=\"button-add\" onClick={() => this.handleClick(user)}/>)\n            case 1: \n                return(<div className=\"button-pending\"/>)\n            case 2:\n                return(<div className=\"button-friend\"/>)\n        }\n    }\n\n    render() {\n        if(this.state.loggedIn == false)\n        {\n            return <Redirect to='/login' />;\n        }\n\n        //receive this from the backend\n        var contactList = this.state.curUserList\n        var index = -1;\n        for(var i in contactList)\n        {\n            if((contactList[i])['user'] === this.state.curUser)\n            {\n                index = i;\n                break;\n            }\n        }\n        \n        if(index > -1)\n        {\n            contactList.splice(index, 1);\n        }\n\n        var renderedcards;\n        if((contactList === undefined || contactList.length == 0) && this.state.hasSearched){\n            renderedcards = <div className=\"noresults\">No users matching the search</div>\n        }\n        else{\n            // generate the contact cards to be rendered\n            renderedcards = contactList.map(contactcard => (contactcard['addstatus'] === 2) ?\n\n            <div className=\"contactcard-friend\">\n                <div className=\"contactname-friend\">\n                    {contactcard['user']}\n                </div>\n                {this.button(contactcard['addstatus'], contactcard['user'])}\n            </div> :\n            <div className=\"contactcard\">\n                <div className=\"contactname\">\n                    {contactcard['user']}\n                </div>\n                {this.button(contactcard['addstatus'], contactcard['user'])}\n            </div>\n            )\n        }\n\n        // check if no cards are to be rendered\n        var finalrender;\n\n        if(renderedcards === null || renderedcards.length == 0)\n        {\n            finalrender = renderedcards;\n        }\n        else\n        {\n            console.log(\"CALLED\")\n            finalrender = <div className=\"searchresult\">{renderedcards}</div>\n        }\n\n\n        return (\n            <div>\n            <div className=\"searchpage\">\n\n                <form action=\"/search\" onSubmit={this.handleSubmit}>\n                    <input \n                        type=\"search\"\n                        name=\"query\"\n                        className=\"search-input\"\n                        value= {this.state.search_value}\n                        onChange= {this.handleChange}\n                        placeholder=\"Search for Friends\"\n                    />\n                    <input className=\"search-button\" type=\"submit\" value=\"\" />\n\n                </form>\n                {finalrender}\n            </div> \n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport './style/FriendRequests.css';\nimport {Redirect} from \"react-router-dom\";\nimport {isLoggedIn, getUserInfo} from '../utils.js';\n\n\nexport default class FriendRequests extends Component {\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n\n            loggedIn: true,\n            curUser: null, // stores the username of the person logged in\n            friendrequestsList: null, // current list of friend requests\n            curfriendreq: null, //stores the friendrequestId of current friend request\n            intervalID: null, // sets update interval\n            response: false, // will later be updated to accept or delete\n\n        };\n        this.handleAccept = this.handleAccept.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n\n    async getUpdatedFriendrequestsList() \n    {\n        console.log(\"Getting updated friend requests list\");\n        try{\n            const userInfo = await getUserInfo();\n            const Notifs  = userInfo.notifs; \n            this.setState({friendrequestsList: Notifs });\n        }\n        catch{\n            console.log(\"error: could not retrieve friend requests list\");\n        }\n    }\n\n\n\n    async componentDidMount() //action to take as soon as enter the page\n    {                   \n        console.log(\"Inside component did mount for friend requests page\");\n        const loggedIn = await isLoggedIn();\n        if (!loggedIn)\n        {\n            this.setState({loggedIn: false});\n        }\n\n\n        const userInfo = await getUserInfo(); // about current user\n        const curUser = userInfo.username;  \n\n        const Notifs  = userInfo.notifs; \n        if(Notifs.length > 0){\n\n            // get updated list of friend requests every 5 seconds\n            this.intervalID = setInterval(this.getUpdatedFriendrequestsList.bind(this), 5000)\n\n            this.setState({loggedIn: loggedIn,  curUser: curUser, friendrequestsList: Notifs,  });\n\n            console.log(\"Obtained user info and friend requests array\");\n        }\n        else{\n            \n            // get updated list of friend requests every 5 seconds\n            // Not sure whether it is right to call this function using .bind(this)\n            this.intervalID = setInterval(this.getUpdatedFriendrequestsList.bind(this), 5000)\n\n            this.setState({loggedIn: loggedIn,  curUser: curUser, friendrequestsList: null, });\n        }\n        \n        console.log(\"Completed component did mount for friend requests page\");\n    }\n\n    componentWillUnmount()\n    {\n        // Interval not needed here\n\n        // stop interval once we exit this page\n        console.log(\"Inside will unmount , intervalID = \", this.intervalID);\n        clearInterval(this.intervalID);\n    }\n\n    handleAccept = async (friendreq_id) =>\n    {\n      \n        const id = friendreq_id;\n\n        // Fetching from server.js\n        const result = await fetch(\"/handlefriendrequest\", \n        {\n            method: 'POST',\n            headers: \n                {\n                    'Content-Type': \"application/json; charset=utf-8\",\n                },\n            // This is the data being posted\n            body: JSON.stringify({curUser: this.state.curUser, curfriendreq:id, response:true}) // + JSON.stringify(this.state.response)\n        })\n\n        const res = await result.json();\n\n        const returnCode = await res.successCode;\n        \n        if (returnCode != 0)\n        {\n           alert('error sending chat')\n            return null;\n        }\n\n        //Process the friend request\n        this.updateandFetch(friendreq_id);\n\n   }\n\n\n   handleDelete = async (friendreq_id) =>\n   {\n    const id = friendreq_id;\n\n    // Fetching from server.js\n    const result = await fetch(\"/handlefriendrequest\", \n    {\n        method: 'POST',\n        headers: \n            {\n                'Content-Type': \"application/json; charset=utf-8\",\n            },\n        // This is the data being posted\n        body: JSON.stringify({curUser: this.state.curUser, curfriendreq:id, response:false}) // + JSON.stringify(this.state.response)\n    })\n\n    const res = await result.json();\n\n    const returnCode = await res.successCode;\n    \n    if (returnCode != 0)\n    {\n       console.log('return code was not 0 from server.js')\n    }\n\n        //Process the friend request\n        this.updateandFetch(friendreq_id);\n\n    }\n\n\n   updateandFetch = async (friendreq_id) =>\n   {\n\n        // Removing friend request from UI display\n        var arraylength = this.state.friendrequestsList.length;\n        var array = this.state.friendrequestsList.slice();\n\n        // Carry on from above: instantly removes friend request from UI display\n        for (var j = 0; j < arraylength; j++) \n        {\n            if (array[j] == friendreq_id)\n            {\n                \n                array.splice(j,1);\n                break;\n            }\n        }\n\n        this.setState({friendrequestsList: array, });\n\n\n   }\n\n\n    render() {\n        if(this.state.loggedIn == false)\n        {\n            return <Redirect to='/login' />;\n        }\n        if (this.state.curUser == null)\n        {\n            return (<div> Loading </div>);\n        }\n\n        console.log(\"Friend requests render\");\n\n        var friendrequestsList = this.state.friendrequestsList;\n        var renderedFriendRequests;\n        \n        if(friendrequestsList === null || friendrequestsList.length == 0)\n        {\n            renderedFriendRequests = <div className=\"friendrequest\"> <a id=\"no-requests\" href='search'>You don't have any friend requests! Search for users here</a></div>\n        }\n        else\n        {\n            // reverse() to display the most recently made friend requests first\n            renderedFriendRequests = friendrequestsList.slice(0).reverse().map(friendreq_id => \n\n                <div className=\"friendrequest\" key={friendreq_id + '.div'}>\n                    <p className=\"friendname\" key={friendreq_id + '.p'}>\n                        {friendreq_id}\n                    </p>\n                    <div className=\"buttonRow\">\n                    <div \n                        className=\"acceptButton\" \n                        key={friendreq_id + '.acc'}\n                        onClick = {() => {this.handleAccept(friendreq_id)}}\n                    >\n                        Accept\n                    </div>\n                    <div \n                        className=\"deleteButton\" \n                        key={friendreq_id + '.del'}\n                        onClick = {() => {this.handleDelete(friendreq_id)}}\n                    >\n                        Delete\n                    </div>\n                    </div>\n\n\n                </div>\n\n                )\n        }\n\n        console.log(\"Generating friend requests page\");\n        return (\n            <div className=\"friendreqPage\">\n                <div className=\"friendreqpanel\">\n                    <div className=\"friendreqList\">\n                        {renderedFriendRequests}\n                    </div>\n                </div>\n            </div>\n            )\n            \n        }\n        \n    }\n\n\n\n\n\n\n\n\n\n\n\n\n","export default __webpack_public_path__ + \"static/media/icon_settings.be305fd2.svg\";","export default __webpack_public_path__ + \"static/media/icon_info.a2fa3da5.svg\";","export default __webpack_public_path__ + \"static/media/icon_chat.9fdc4542.svg\";","export default __webpack_public_path__ + \"static/media/icon_search.4672f25b.svg\";","export default __webpack_public_path__ + \"static/media/friend_requests.02d2d7cf.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './style/Nav.css';\nimport {isLoggedIn} from '../utils.js';\nimport IconSettings from '../images/icon_settings.svg';\nimport IconInfo from '../images/icon_info.svg';\nimport IconChat from '../images/icon_chat.svg';\nimport IconSearch from '../images/icon_search.svg';\nimport IconFriendReqs from '../images/friend_requests.svg';\nimport Logo from '../images/logotest.png';\n\nexport default class Nav extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loggedIn: false,\n            curPage: '',\n        }\n    }\n    componentDidMount() //we need to make sure we are actually logged in\n    {                   \n        var page = '';\n        //checks what path we're currently on and appropriately generates a title on the navbar\n        switch(window.location['pathname'])\n        {\n            case '/chats': page = 'Chats'; break;\n            case '/chatapp': page = 'Log In'; break;\n            case '/about': page = 'About'; break;\n            case '/search': page = 'Search for users'; break;\n            case '/settings/general': page = 'Settings'; break;\n            case '/settings/appearance': page = 'Settings'; break;\n            case '/settings/signout': page = 'Settings'; break;\n            case '/friendrequests': page = 'Friend requests'; break;\n            case '/signup': page = 'Sign Up'; break;\n            case '/login': page = 'Log In'; break;\n            default: page = ''; break;\n        }\n        isLoggedIn().then(loggedIn => this.setState({loggedIn: loggedIn, curPage: page}));\n\n    }\n\n    render() {\n        if(this.state.loggedIn == false)\n        {\n            //navbar that is rendered if the user isnt logged in\n            return (\n                <div className=\"main\">\n                    <div className=\"navigation1\">\n                        <div className=\"page-title\">{this.state.curPage}</div>\n                        <Link to=\"/login\" className=\"navButton\" onClick={() => this.setState({curPage: 'Log In'})}>\n                            Log In\n                        </Link>\n                        or\n                        <Link to=\"/signup\" className=\"navButton\" onClick={() => this.setState({curPage: 'Sign Up'})}>\n                            Sign Up\n                        </Link>\n                        <Link to=\"/about\" className=\"navButton\" onClick={() => this.setState({curPage: 'About'})}>\n                            <img src={IconInfo} className=\"navIcon\"/>\n                        </Link>\n                    </div>\n                </div>\n            );\n        }\n        //navbar that is rendered if the user is logged in\n        return (\n                <div className=\"main\">\n                    <div className=\"navigation1\">\n                    <img src={Logo} className=\"navbarLogo\"/>\n                    <div className=\"page-title\">{this.state.curPage}</div>\n                        <Link to=\"/chats\" className=\"navButton\" onClick={() => this.setState({curPage: 'Chats'})}>\n                            <img src={IconChat} className=\"navIcon\"/>\n                        </Link>\n                        <Link to=\"/friendrequests\" className=\"navButton\" onClick={() => this.setState({curPage: 'Friend Requests'})}>\n                            <img src={IconFriendReqs} className=\"navIcon\"/>\n                        </Link>\n                        <Link to=\"/search\" className=\"navButton\" onClick={() => this.setState({curPage: 'Search for Users'})}>\n                            <img src={IconSearch} className=\"navIcon\"/>\n                        </Link>\n                        <Link to=\"/settings/general\" className=\"navButton\" onClick={() => this.setState({curPage: 'Settings'})}>\n                            <img src={IconSettings} className=\"navIcon\"/>\n                        </Link>\n                        <Link to=\"/about\" className=\"navButton\" onClick={() => this.setState({curPage: 'About'})}>\n                            <img src={IconInfo} className=\"navIcon\"/>\n                        </Link>\n                    </div>\n                </div>\n        );\n        \n        \n    }\n}","import React, { Component } from \"react\";\nimport './style/Page404.css';\nimport egg from '../images/paul.jpg';\n\n\n//page404 in case someone tries to access an invalid URL\nexport default function Page404(props) {\n        return (\n            <div className=\"login\">\n                <img src={egg} id=\"loginlogo\"/>\n                <div className=\"intro\">\n                    Uh oh, this page doesn't exist\n                </div>\n             </div> \n        )\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport './App.css';\nimport SettingsGeneral from './components/SettingsGeneral.js';\nimport SettingsAppearance from './components/SettingsAppearance.js';\nimport SettingsSignout from './components/SettingsSignout.js';\nimport ChatWindow from './components/ChatWindow.js';\nimport LoginPage from './components/LoginPage.js';\nimport About from './components/About.js';\nimport SignupPage from './components/SignupPage.js';\nimport SearchPage from './components/SearchPage.js';\nimport FriendRequests from './components/FriendRequests.js';\nimport Nav from './components/Nav.js';\nimport Page404 from './components/Page404.js';\n\n//changed App from a function a class \nclass App extends Component {\n\n  // set up routing for every page within the app\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <div>\n            <Nav />\n            <div id=\"alert-green\" />\n            <div id=\"alert-red\" />\n            <Switch>\n              <Route path=\"/about\">\n                <About />\n              </Route>\n              <Route path=\"/signup\">\n                <SignupPage />\n              </Route>\n              <Route path=\"/login\">\n                <LoginPage />\n              </Route>\n              <Route path=\"/chatapp\">\n                <LoginPage />\n              </Route>\n              <Route path=\"/chats\">\n                <ChatWindow />\n              </Route>\n              <Route path=\"/search\">\n                <SearchPage />\n              </Route>\n              <Route path=\"/settings/general\">\n                <SettingsGeneral />\n              </Route>\n              <Route path=\"/settings/appearance\">\n                <SettingsAppearance />\n              </Route>\n              <Route path=\"/settings/signout\">\n                <SettingsSignout />\n              </Route>\n              <Route path=\"/search\">\n                <SearchPage />\n              </Route>\n              <Route path=\"/friendrequests\">\n                <FriendRequests />\n              </Route>\n              <Route exact path=\"/\"> {/* needs to be exact path otherwise it becomes default */}\n                <LoginPage />\n              </Route>\n              <Route path=\"/404\" component={Page404} />\n              <Redirect to=\"/404\" />\n            </Switch>\n          </div>\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM, {render} from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}